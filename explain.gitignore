// As we know -> LocalStorage uses String to store data but we convert by JSON.parse to objects 

// difference b/w using String and Objects

// //1// Using Objects

// // Storing tasks as an array of objects
// const tasks = [
//   { id: 1, description: 'Complete assignment', status: 'Incomplete' },
//   { id: 2, description: 'Read a book', status: 'Complete' }
// ];

// // Storing in localStorage
// localStorage.setItem('tasks', JSON.stringify(tasks));

// // Retrieving and manipulating tasks
// const retrievedTasks = JSON.parse(localStorage.getItem('tasks')) || [];
// retrievedTasks.push({ id: 3, description: 'Exercise', status: 'Incomplete' });

// //2// using string

// // Storing tasks as a string
// const tasksString = '[{"id":1,"description":"Complete assignment","status":"Incomplete"},
// { "id":2,"description":"Read a book","status":"Complete"}]';

// // Storing in localStorage
// localStorage.setItem('tasks', tasksString);

// // Retrieving and manipulating tasks
// const retrievedTasksString = localStorage.getItem('tasks') || '[]';
// const retrievedTasksArray = JSON.parse(retrievedTasksString);
// retrievedTasksArray.push({ id: 3, description: 'Exercise', status: 'Incomplete' });


//so whats the difference//

// Key Differences:

// Readability:

// Objects: More human-readable due to the structured format with key-value pairs.
// Strings: Less readable, especially when dealing with complex data structures.
// Manipulation:

// Objects: Direct manipulation of properties is possible.
// Strings: Requires conversion to an array for manipulation, which involves additional steps.
// Type Safety:

// Objects: Ensures a consistent structure for each task.
// Strings: Potential for data type mismatches if not converted back to a structured format.


//writing same thing in html and css but in js example

//1   const taskInputField = document.createElement('input');
//       taskInputField.type = 'text';
//       taskInputField.value = 'tasktext';
//       taskInputField.className = 'text-input';
//       tastInputField.setAttribute("readonly", 'true');

// <!-- //2   <input 
//              type="text"
//              class="text"
//              id="taskInput"
//              placeholder="My new Task"
//              readonly />
          
//             <button class="clear-text">Edit</button>
//             <button class="add-text">Delete</button>       -->
     

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


// This concept is related to delete button 

//1) We are just removing the visual representaion as-

// taskListContainer.removeChild(newTaskContainer):

// 2) tasks = tasks.filter(taskItem => taskItem !== taskText):
// so same in this case like where taskText wil be written should be removed right?? if delete button is clicked

//Super Simple Example :-

// If a task's text is not equal to taskText, it means it's a task you want to keep in the array.
// If a task's text is equal to taskText, it means it's the task you want to remove, and the condition evaluates to false for that task.



// Extra Info

// In the context of the addTask function, when you create a new task container 
// and set its text based on the input value, the( taskText variable holds the value)
// of that specific task. Therefore, when you later click the "Delete" button for that
// task, it will use the corresponding taskText value to filter out and remove that specific task
// from both the visual representation and the data stored in localStorage.

// Each task container( operates independently in this scenario), and the taskText associated
// with each task container ensures that the correct task is targeted for removal when the "Delete" button is clicked.




// This line updates the underlying data structure (the tasks array in this case) 
// by removing the task identified by taskText. It ensures that when you reload 
// the page or interact with the data programmatically, the removed task is not present in the data.


// Reasoning :- 
// If a task's text is not equal to taskText, it means it's a task you want to keep in the array.
// If a task's text is equal to taskText, it means it's the task you want to remove, and the condition evaluates to false for that task.


// If a task's text is equal to taskText, it means it's the task you want to remove.
// The condition taskItem !== taskText evaluates to false for that task, so it is excluded from the new array.
// For all other tasks (those not equal to taskText), the condition evaluates to true, and 
// they are included in the new array.

// Explain-

//it will get disappeared visually but when page will load, It is still present in localStorage
// so we have to use this tasks = tasks.filter(taskItem => taskItem !== taskText); to remove it completely




// for each and .map

// While the two code snippets have similar functionality, they have a key difference:

// 1. **`tasks.forEach(...)`**:
//    ```javascript
//    tasks.forEach(taskText => {
//        createTaskContainer(taskText, taskListContainer);
//    });
//    ```
//    This code uses `forEach` to iterate over each element in the `tasks` array and applies the `createTaskContainer` function to each element.
//     However, it doesn't create a new array. It's generally used for side effects (e.g., modifying the DOM, logging, etc.) 
//     rather than producing a new array.

// 2. **`const taskContainers = tasks.map(...)`**:
//    ```javascript
//    const taskContainers = tasks.map(taskText => createTaskContainer(taskText, taskListContainer));
//    ```
//    This code uses `map` to iterate over each element in the `tasks` array and creates a new array (`taskContainers`) 
//    by applying the `createTaskContainer` function to each element. It is often used when you want to transform each 
//    element and produce a new array based on those transformations.

// If you're only interested in performing some action for each task without creating a new array, the `forEach` approach is appropriate.
//  If you want to create a new array based on the tasks (e.g., an array of task containers), then the `map` approach is more suitable.
// In summary, the choice between `forEach` and `map` depends on whether you need a new array as the result of the operation.  //

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Differences

// .map always create a new array and forEach doesnt
// example 
// const numbers = [1, 2, 3, 4];

// // Double each number and create a new array
// const doubledNumbers = numbers.map(num => num * 2);

// console.log(doubledNumbers); // Output: [2, 4, 6, 8]

// forEach

//example 

// const tasks = ['Task 1', 'Task 2', 'Task 3'];

// // Log each task to the console without creating a new array
// tasks.forEach(task => console.log(task));


// When using forEach, you don't create a new array based on transformations;
// instead, you typically perform some action or side effect on each element without generating a new array

